// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "SmartLink_Project/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: userData
func (_m *UserUseCase) LoginUser(userData domain.User) (domain.User, int, string) {
	ret := _m.Called(userData)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(userData)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.User) int); ok {
		r1 = rf(userData)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(domain.User) string); ok {
		r2 = rf(userData)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// RegisterUser provides a mock function with given fields: newUser
func (_m *UserUseCase) RegisterUser(newUser domain.User) (int, string) {
	ret := _m.Called(newUser)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(domain.User) string); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
